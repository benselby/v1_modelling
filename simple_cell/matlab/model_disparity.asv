% A basic model for local disparity representation in macaque V1 
% Intended to reproduce figure xx of Cumming and Parker (2000), which
% shows V1 simple cell responses to gratings of varying disparity

close all

% Values from figure xx of Cumming and Parker, 2000
rate      = [130   62   27   112  140 50  26  115 111]; % spikes per second
disparity = [-0.7 -0.6 -0.4 -0.2  0   0.2 0.4 0.6 0.75]; % degrees

freq = 1.5; % spatial frequency of gratings (cycles per degree)
theta = 90*pi/180; % orietation of grating (radians)

global fsize;
fsize = 25; % grating image size (pixels)

left_img = mat2gray(generate_grating(freq, theta, fsize));
right_img = mat2gray(generate_grating(freq, theta, fsize, pi/2));

figure()
subplot(1,2,1)
imshow(left_img)
title('Left Image')

subplot(1,2,2)
imshow(right_img)
title('Right Image')

% Build the grating bank for regression:
global grating_bank;
grating_freq = 4;
grating_theta = 0;

grating_bank = zeros(fsize, fsize, 2*length(disparity)+1);
for i=1:length(disparity)
    phase = 2*pi*disparity(i);
    grating_bank(:,:,2*i) = generate_grating(grating_freq, grating_theta, fsize);
    grating_bank(:,:,2*i+1) = generate_grating(grating_freq, grating_theta, fsize, phase);
    figure
    subplot(1,2,1)
    imshow(grating_bank(:,:,2*i);
end

% % Set lower and upper bounds for variables being optimized
% % Variable order: [ sig_x sig_y theta phi_left phi_right k gain j_bias rc ]
% lb = [2  2  0  0    0    pi/20 0.05  -100  1];
% ub = [10 10 pi pi/2 pi/2 pi    10    100  10]; 
% 
% numIter = 1;
% xmulti = zeros(numIter,9);
% 
% paramsInitial = [5 5 0 0 0 2 1 50 1];
% problem = createOptimProblem('lsqcurvefit','x0',paramsInitial,'objective',@LIF_disp_response,...
%             'lb',lb,'ub',ub,'xdata', disparity, 'ydata',rate);
% ms = MultiStart('PlotFcns',@gsplotbestf);
% ms.UseParallel = 'always';
% 
% [xmulti(1,:),errormulti] = run(ms,problem,100);    
% 
% neural_params = xmulti
% 
% estimate = LIF_sfreq_response(neural_params, disparity );
% figure();
% plot(disparity, rate, 'ro-', disparity, estimate, '*-')
% title('V1 Disparity Tuning')
% xlabel('Dispartiy (degrees)')
% ylabel('Response (Spikes / second)')
% legend('Cumming and Parker Data', 'Model Approximation')
% 
% figure();
% neuronRF = gabor(neural_params(1), neural_params(2), theta, neural_params(3), neural_params(4), fsize);
% imshow(mat2gray(neuronRF))
% title('Receptive Field of Model Neuron')